{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"AudioBackend","text":"<p>AudioBackend is a high-quality audio playback library with DSD support and efficient buffer management. It provides a robust and flexible solution for audio playback in Python applications.</p>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li>High-Quality Audio Playback: Support for various audio formats including DSD</li> <li>Efficient Buffer Management: Optimized buffering system for smooth playback</li> <li>Automatic Sample Rate Detection: Smart handling of different sample rates</li> <li>Thread-Safe Operations: Reliable concurrent operation handling</li> <li>Comprehensive Error Handling: Error recovery system</li> <li>Callback System: Rich event notification system</li> </ul>"},{"location":"#project-overview","title":"Project Overview","text":"<p>AudioBackend is designed to provide a simple yet powerful interface for audio playback in Python applications. Whether you're building a music player, audio processing application, or need high-quality audio playback in your project, AudioBackend offers the features you need.</p> <pre><code>from audiobackend import AudioBackend\n\n# Create player instance\nplayer = AudioBackend()\n\n# Load and play audio\nplayer.load_file(\"music.mp3\")\nplayer.play()\n</code></pre>"},{"location":"#quick-navigation","title":"Quick Navigation","text":"<ul> <li>Installation Guide: Get started with AudioBackend</li> <li>Usage Guide: Learn how to use AudioBackend</li> <li>API Reference: Detailed API documentation</li> <li>Contributing Guide: Help improve AudioBackend</li> </ul>"},{"location":"#support","title":"Support","text":"<ul> <li>Create an issue on GitHub</li> <li>Check out the Contributing Guide</li> </ul>"},{"location":"#license","title":"License","text":"<p>AudioBackend is released under the GPL-3.0 License. See the LICENSE file for details.</p>"},{"location":"api/","title":"API Reference","text":""},{"location":"api/#audiobackend-class","title":"AudioBackend Class","text":"<p>Main Class</p> <p>The AudioBackend class is the primary interface for audio playback functionality.</p>"},{"location":"api/#constructor","title":"Constructor","text":"<pre><code>player = AudioBackend()\n</code></pre> <p>Creates a new instance of the AudioBackend player with default settings.</p>"},{"location":"api/#methods","title":"Methods","text":""},{"location":"api/#file-operations","title":"File Operations","text":""},{"location":"api/#load_file","title":"<code>load_file()</code>","text":"<pre><code>def load_file(file_path: str) -&gt; bool\n</code></pre> <p>Loads an audio file for playback.</p> <p>Parameters:</p> <ul> <li><code>file_path</code> (str): Path to the audio file</li> </ul> <p>Returns:</p> <ul> <li><code>bool</code>: True if file loaded successfully, False otherwise</li> </ul> <p>Example: <pre><code>success = player.load_file(\"music.mp3\")\nif not success:\n    print(\"Failed to load file\")\n</code></pre></p>"},{"location":"api/#playback-control","title":"Playback Control","text":""},{"location":"api/#play","title":"<code>play()</code>","text":"<pre><code>def play() -&gt; None\n</code></pre> <p>Starts or resumes playback.</p>"},{"location":"api/#pause","title":"<code>pause()</code>","text":"<pre><code>def pause() -&gt; None\n</code></pre> <p>Pauses playback.</p>"},{"location":"api/#stop","title":"<code>stop()</code>","text":"<pre><code>def stop() -&gt; None\n</code></pre> <p>Stops playback and releases resources.</p>"},{"location":"api/#seek","title":"<code>seek()</code>","text":"<pre><code>def seek(position_ms: int) -&gt; None\n</code></pre> <p>Seeks to specified position.</p> <p>Parameters:</p> <ul> <li><code>position_ms</code> (int): Position to seek to in milliseconds</li> </ul>"},{"location":"api/#set_volume","title":"<code>set_volume()</code>","text":"<pre><code>def set_volume(volume: float) -&gt; None\n</code></pre> <p>Sets playback volume.</p> <p>Parameters:</p> <ul> <li><code>volume</code> (float): Volume level between 0.0 and 1.0</li> </ul>"},{"location":"api/#callback-management","title":"Callback Management","text":""},{"location":"api/#set_position_callback","title":"<code>set_position_callback()</code>","text":"<pre><code>def set_position_callback(callback: Callable[[int], None]) -&gt; None\n</code></pre> <p>Sets callback for position updates.</p> <p>Parameters:</p> <ul> <li><code>callback</code> (Callable[[int], None]): Function that receives position in milliseconds</li> </ul>"},{"location":"api/#set_playback_state_callback","title":"<code>set_playback_state_callback()</code>","text":"<pre><code>def set_playback_state_callback(callback: Callable[[bool], None]) -&gt; None\n</code></pre> <p>Sets callback for playback state changes.</p> <p>Parameters:</p> <ul> <li><code>callback</code> (Callable[[bool], None]): Function that receives boolean playing state</li> </ul>"},{"location":"api/#set_end_of_track_callback","title":"<code>set_end_of_track_callback()</code>","text":"<pre><code>def set_end_of_track_callback(callback: Callable[[], None]) -&gt; None\n</code></pre> <p>Sets callback for track end notification.</p> <p>Parameters:</p> <ul> <li><code>callback</code> (Callable[[], None]): Function called when track ends</li> </ul>"},{"location":"api/#properties","title":"Properties","text":""},{"location":"api/#duration","title":"<code>duration</code>","text":"<pre><code>@property\ndef duration(self) -&gt; int\n</code></pre> <p>Gets the duration of the current track in milliseconds.</p>"},{"location":"api/#position","title":"<code>position</code>","text":"<pre><code>@property\ndef position(self) -&gt; int\n</code></pre> <p>Gets the current playback position in milliseconds.</p>"},{"location":"api/#is_playing","title":"<code>is_playing</code>","text":"<pre><code>@property\ndef is_playing(self) -&gt; bool\n</code></pre> <p>Gets the current playback state.</p>"},{"location":"api/#technical-details","title":"Technical Details","text":""},{"location":"api/#buffer-management","title":"Buffer Management","text":"Parameter Size (frames) Description Default buffer 65536 Standard buffer size Minimum buffer 32768 Minimum allowed size Maximum buffer 262144 Maximum allowed size Prebuffer 16384 Initial buffer before playback"},{"location":"api/#audio-parameters","title":"Audio Parameters","text":"Parameter Value Description Default sample rate 48000 Hz Standard playback rate Maximum rate 384000 Hz Maximum supported rate Channels 2 Stereo output"},{"location":"api/#error-recovery","title":"Error Recovery","text":"<p>The system includes:</p> <ul> <li>Automatic buffer underrun recovery</li> <li>Sample rate adaptation</li> <li>Stream recreation on errors</li> <li>Seek error handling</li> </ul>"},{"location":"contributing/","title":"Contributing Guide","text":""},{"location":"contributing/#getting-started","title":"Getting Started","text":""},{"location":"contributing/#development-environment","title":"Development Environment","text":"<ol> <li> <p>Fork and clone the repository: <pre><code>git clone https://github.com/your-username/audiobackend.git\ncd audiobackend\n</code></pre></p> </li> <li> <p>Create a virtual environment: <pre><code>python -m venv venv\nsource venv/bin/activate  # On Windows: venv\\Scripts\\activate\n</code></pre></p> </li> <li> <p>Install development dependencies: <pre><code>pip install -e .[dev]\n</code></pre></p> </li> </ol>"},{"location":"contributing/#development-workflow","title":"Development Workflow","text":""},{"location":"contributing/#making-changes","title":"Making Changes","text":"<ol> <li> <p>Create a feature branch: <pre><code>git checkout -b feature-name\n</code></pre></p> </li> <li> <p>Make your changes following our guidelines</p> </li> <li>Test your changes: <pre><code>pytest\n</code></pre></li> </ol>"},{"location":"contributing/#code-style","title":"Code Style","text":"<p>We follow a strict code style to maintain consistency:</p> General RulesExample <ul> <li>Follow PEP 8</li> <li>Use meaningful variable names</li> <li>Keep functions focused</li> <li>Add type hints</li> <li>Include docstrings</li> </ul> <pre><code>def process_audio(data: np.ndarray) -&gt; np.ndarray:\n    \"\"\"\n    Process audio data with applied effects.\n\n    Args:\n        data: Input audio array\n\n    Returns:\n        Processed audio array\n    \"\"\"\n    # Your code here\n    return processed_data\n</code></pre>"},{"location":"contributing/#testing","title":"Testing","text":"<p>Write tests for new features:</p> <pre><code>def test_audio_playback():\n    player = AudioBackend()\n    assert player.load_file(\"test.mp3\")\n    player.play()\n    assert player.is_playing\n</code></pre> <p>Run tests with: <pre><code>pytest\npytest --cov=audiobackend  # With coverage\n</code></pre></p>"},{"location":"contributing/#documentation","title":"Documentation","text":"<p>Update documentation for changes:</p> <ol> <li>Update docstrings</li> <li>Update markdown files in <code>docs/</code></li> <li>Build docs locally: <pre><code>mkdocs serve\n</code></pre></li> </ol>"},{"location":"contributing/#pull-requests","title":"Pull Requests","text":""},{"location":"contributing/#pr-process","title":"PR Process","text":"<ol> <li>Update documentation</li> <li>Run tests</li> <li>Create PR with:<ul> <li>Clear description</li> <li>Issue references</li> <li>Test results</li> <li>Documentation updates</li> </ul> </li> </ol>"},{"location":"contributing/#pr-template","title":"PR Template","text":"<pre><code>## Description\nBrief description of changes\n\n## Related Issues\nFixes #123\n\n## Checklist\n- [ ] Tests added\n- [ ] Documentation updated\n- [ ] Code follows style guide\n- [ ] All tests pass\n</code></pre>"},{"location":"contributing/#reporting-issues","title":"Reporting Issues","text":""},{"location":"contributing/#bug-reports","title":"Bug Reports","text":"<p>Include:</p> <ol> <li>Python version</li> <li>Operating system</li> <li>Library version</li> <li>Complete error message</li> <li>Minimal reproducible example</li> </ol>"},{"location":"contributing/#feature-requests","title":"Feature Requests","text":"<p>Include:</p> <ol> <li>Use case</li> <li>Proposed solution</li> <li>Example usage</li> </ol>"},{"location":"contributing/#project-structure","title":"Project Structure","text":"<pre><code>audiobackend/\n\u251c\u2500\u2500 src/\n\u2502   \u2514\u2500\u2500 audiobackend/\n\u2502       \u251c\u2500\u2500 __init__.py\n\u2502       \u2514\u2500\u2500 audiobackend.py\n\u251c\u2500\u2500 tests/\n\u2502   \u2514\u2500\u2500 test_audiobackend.py\n\u251c\u2500\u2500 docs/\n\u2502   \u251c\u2500\u2500 index.md\n\u2502   \u2514\u2500\u2500 ...\n\u251c\u2500\u2500 pyproject.toml\n\u2514\u2500\u2500 README.md\n</code></pre>"},{"location":"contributing/#code-of-conduct","title":"Code of Conduct","text":""},{"location":"contributing/#our-standards","title":"Our Standards","text":"<ul> <li>Be respectful and inclusive</li> <li>Focus on constructive feedback</li> <li>Help others learn and grow</li> <li>Accept feedback</li> </ul>"},{"location":"contributing/#enforcement","title":"Enforcement","text":"<p>Violations can be reported to maintainers:</p> <ul> <li>Via GitHub issues</li> <li>Email: niamorrodev@gmail.com</li> </ul>"},{"location":"contributing/#getting-help","title":"Getting Help","text":"<ul> <li>Create an issue</li> <li>Join discussions</li> <li>Read documentation</li> </ul>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#prerequisites","title":"Prerequisites","text":"<p>Before installing AudioBackend, make sure you have:</p> <ul> <li>Python 3.7 or higher</li> <li>pip package manager</li> </ul> <p>Virtual Environment</p> <p>It's recommended to use a virtual environment: <pre><code>python -m venv venv\nsource venv/bin/activate  # On Windows: venv\\Scripts\\activate\n</code></pre></p>"},{"location":"installation/#installation-methods","title":"Installation Methods","text":""},{"location":"installation/#from-pypi","title":"From PyPI","text":"<p>The recommended way to install AudioBackend:</p> <pre><code>pip install audiobackend\n</code></pre>"},{"location":"installation/#from-source","title":"From Source","text":"<p>For the latest development version:</p> <pre><code>git clone https://github.com/Niamorro/audiobackend.git\ncd audiobackend\npip install -e .\n</code></pre>"},{"location":"installation/#development-installation","title":"Development Installation","text":"<p>For contributing or development:</p> <pre><code>pip install -e .[dev]\n</code></pre>"},{"location":"installation/#system-dependencies","title":"System Dependencies","text":"Ubuntu/DebianFedora/Red HatArch LinuxmacOSWindows <pre><code>sudo apt update\nsudo apt install libportaudio2 libportaudiocpp0 portaudio19-dev\n</code></pre> <pre><code>sudo dnf install portaudio-devel\n</code></pre> <pre><code>sudo pacman -S portaudio\n</code></pre> <pre><code>brew install ffmpeg portaudio\n</code></pre> <p>FFmpeg is included in the PyAV package. For PortAudio, it's included in the sounddevice package.</p>"},{"location":"installation/#troubleshooting","title":"Troubleshooting","text":""},{"location":"installation/#common-issues","title":"Common Issues","text":"ImportError: No module named 'av' <p>This usually means PyAV installation failed. Try: <pre><code>pip install --upgrade av\n</code></pre></p> PortAudio not found <p>Install the PortAudio development package for your system (see System Dependencies above)</p> Version conflicts <pre><code>pip install --upgrade pip\npip install --upgrade audiobackend\n</code></pre>"},{"location":"installation/#getting-help","title":"Getting Help","text":"<p>If you encounter any issues:</p> <ol> <li>Check the GitHub Issues</li> <li>Create a new issue with:<ul> <li>Your Python version</li> <li>Your operating system</li> <li>The complete error message</li> <li>Steps to reproduce</li> </ul> </li> </ol>"},{"location":"usage/","title":"Usage Guide","text":""},{"location":"usage/#basic-usage","title":"Basic Usage","text":""},{"location":"usage/#quick-start","title":"Quick Start","text":"<p>Create a player and start playing audio:</p> <pre><code>from audiobackend import AudioBackend\n\n# Initialize player\nplayer = AudioBackend()\n\n# Load and play audio\nplayer.load_file(\"music.mp3\")\nplayer.play()\n</code></pre>"},{"location":"usage/#playback-controls","title":"Playback Controls","text":"<p>Control your audio playback with these methods:</p> <pre><code># Basic controls\nplayer.pause()    # Pause playback\nplayer.play()     # Resume playback\nplayer.stop()     # Stop completely\n\n# Volume control (0.0 to 1.0)\nplayer.set_volume(0.8)\n\n# Seeking (in milliseconds)\nplayer.seek(60000)  # Seek to 1 minute\n</code></pre>"},{"location":"usage/#advanced-features","title":"Advanced Features","text":""},{"location":"usage/#event-callbacks","title":"Event Callbacks","text":"<p>AudioBackend provides a comprehensive callback system:</p> <pre><code># Track position updates\ndef on_position(position_ms: int):\n    minutes = position_ms // 60000\n    seconds = (position_ms % 60000) // 1000\n    print(f\"Position: {minutes}:{seconds:02d}\")\n\n# Playback state changes\ndef on_playback_state(is_playing: bool):\n    state = \"playing\" if is_playing else \"paused\"\n    print(f\"Playback {state}\")\n\n# Track completion\ndef on_track_end():\n    print(\"Track finished\")\n\n# Register callbacks\nplayer.set_position_callback(on_position)\nplayer.set_playback_state_callback(on_playback_state)\nplayer.set_end_of_track_callback(on_track_end)\n</code></pre>"},{"location":"usage/#resource-management","title":"Resource Management","text":"<p>Use context managers or try-finally for proper cleanup:</p> <pre><code># Option 1: Manual cleanup\ntry:\n    player = AudioBackend()\n    player.load_file(\"music.mp3\")\n    player.play()\n    # ... your code ...\nfinally:\n    player.stop()\n</code></pre>"},{"location":"usage/#best-practices","title":"Best Practices","text":""},{"location":"usage/#performance-optimization","title":"Performance Optimization","text":"<ol> <li> <p>Player Reuse <pre><code># Good - reuse player\nplayer = AudioBackend()\nfor file in files:\n    player.load_file(file)\n    player.play()\n\n# Bad - creating multiple instances\nfor file in files:\n    player = AudioBackend()  # Don't do this\n    player.load_file(file)\n</code></pre></p> </li> <li> <p>Buffer Management <pre><code># For low-latency applications\nplayer.load_file(file)\nplayer.play()  # Starts playing as soon as initial buffer is ready\n</code></pre></p> </li> </ol>"},{"location":"usage/#error-handling","title":"Error Handling","text":"<p>Always check return values and handle errors:</p> <pre><code># Load file with error checking\nif not player.load_file(\"music.mp3\"):\n    print(\"Failed to load file\")\n    # Handle error...\n\n# Handle playback errors\ntry:\n    player.play()\nexcept Exception as e:\n    print(f\"Playback error: {e}\")\n    # Handle error...\n</code></pre>"},{"location":"usage/#examples","title":"Examples","text":""},{"location":"usage/#simple-music-player","title":"Simple Music Player","text":"<pre><code>from audiobackend import AudioBackend\nimport time\n\ndef create_music_player():\n    player = AudioBackend()\n\n    def format_time(ms):\n        minutes = ms // 60000\n        seconds = (ms % 60000) // 1000\n        return f\"{minutes}:{seconds:02d}\"\n\n    def update_position(pos):\n        print(f\"\\rPosition: {format_time(pos)}\", end=\"\")\n\n    player.set_position_callback(update_position)\n\n    return player\n\n# Usage\nplayer = create_music_player()\nplayer.load_file(\"music.mp3\")\nplayer.play()\n\n# Keep program running\ntry:\n    while player.is_playing:\n        time.sleep(0.1)\nexcept KeyboardInterrupt:\n    player.stop()\n</code></pre>"},{"location":"usage/#playlist-implementation","title":"Playlist Implementation","text":"<pre><code>class Playlist:\n    def __init__(self):\n        self.player = AudioBackend()\n        self.tracks = []\n        self.current_index = 0\n\n        def on_track_end():\n            self.play_next()\n\n        self.player.set_end_of_track_callback(on_track_end)\n\n    def add_track(self, file_path):\n        self.tracks.append(file_path)\n\n    def play_next(self):\n        if self.current_index &lt; len(self.tracks) - 1:\n            self.current_index += 1\n            self.player.load_file(self.tracks[self.current_index])\n            self.player.play()\n\n    def play(self):\n        if self.tracks:\n            self.player.load_file(self.tracks[self.current_index])\n            self.player.play()\n</code></pre>"}]}